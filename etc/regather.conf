# -*- mode: conf -*-
#

[core]
#   altroot      = /tmp/regather-altroot.d
#   dryrun       = 1
#   uid          = ldap
#   gid          = ldap
  pid_file     = /var/run/openldap/regather.pid
  tt_debug     = 1
  tt_path      = /usr/local/etc/regather.d

[log]
  facility     = local4
  colors       = 0
  foreground   = 0
  verbosity    = 0

[ldap opt]
#   debug        = 1
#   version      = 3

[ldap srch]
  base         = dc=umidb
  filter       = (|\
(&\
 (objectClass=umiOvpnCfg)\
 (objectClass=umiUserCertificate)\
)\
(&\
 (mu-sieveOnReceive=*)\
 (authorizedService=mail*)\
)\
)
  scope        = sub
  log_base     = cn=umilog

[service ovpn]
#   uid          = openvpn
#   gid          = openvpn
  chmod        = 0640
  out_path     = /tmp/2.kill/regather/out_ovpn
  tt_file      = ovpn.tt
#   out_ext     = .ovpn
  ctrl_attr    = umiOvpnCfgConfig

[service ovpn map s]
  CN           = cn
  OS           = umiOvpnAddDevOS
  SN           = umiUserCertificateSn
  config       = umiOvpnCfgConfig
  createdon    = createTimestamp
  device       = umiOvpnAddDevType
  entryCSN     = entryCSN
  entryUUID    = entryUUID
  ifconfigpush = umiOvpnCfgIfconfigPush
  modifiedon   = modifyTimestamp
  notafter     = umiUserCertificateNotAfter
  notbefore    = umiUserCertificateNotBefore
  state        = umiOvpnAddStatus

[service ovpn map m]
  iroute       = umiOvpnCfgIroute
  push         = umiOvpnCfgPush

[service sieve]
  chown	     = 1
  chmod        = 0400
  out_path     = /tmp/2.kill/regather/out_sieve
  tt_file      = sieve.tt
  out_file     = .sieve
  out_file_pfx = homeDirectory
  ctrl_attr    = mu-sieveOnReceive

[service sieve map s]
  mu_sieveOnReceive = mu-sieveOnReceive
  mu_mailBox        = mu-mailBox
  homeDirectory     = homeDirectory
  uid               = uid
  uidNumber	    = uidNumber
  gidNumber	    = gidNumber

[service crl]
  chmod       = 0644
  out_path    = /tmp/2.kill/regather/out_crl
  tt_file     = crl.tt
  out_ext     = -crl.pem
  ctrl_attr   = certificateRevocationList;binary

[service crl map s]
  certificateRevocationList = certificateRevocationList;binary

# END
